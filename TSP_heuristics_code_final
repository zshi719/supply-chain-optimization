import numpy as np

# Nearest Neighbour Algorithm
# Source: https://stackoverflow.com/questions/17493494/nearest-neighbour-algorithm

def NN(A, start):
    """Nearest neighbor algorithm.
    Inputs:
        - A is an NxN array indicating distance between N locations
        - start is the index of the starting location
    Returns the path and cost of the found solution
    """
    path = [start]
    cost = 0
    N = A.shape[0]
    mask = np.ones(N, dtype=bool)  # boolean values indicating which 
                                   # locations have not been visited
    mask[start] = False
    
    for i in range(N-1):
        last = path[-1]
        next_ind = np.argmin(A[last][mask]) # find minimum of remaining locations
        # print(A[last][mask])
        # print("next_idx:", next_ind)
        next_loc = np.arange(N)[mask][next_ind] # convert to original location
        # print(mask)
        # print("next_loc:", next_loc)
        path.append(next_loc)
        mask[next_loc] = False
        cost += A[last, next_loc]  

    return path, cost

def NN_modified(A, start, type_array):
    """Nearest neighbor algorithm.
    Inputs:
        - A is an NxN array indicating distance between N locations
        - start is the index of the starting location
        - type_array: list of hard or easy customers corresponding to their nodes
    Returns the path and cost of the found solution
    """
    path = [start]
    cost = 0
    N = A.shape[0]
    mask = np.ones(N, dtype=bool)  # boolean values indicating which 
                                   # locations have not been visited
    mask[start] = False

    for i in range(N-1):
        last = path[-1]
        found_customer = False
        # if current customer is "hard", find the next "easy" customer
        if type_array[i] == "Hard":
            location_copy = A[last][mask]
            # loop through remaining customers and find the next easy one 
            for loop_idx in range(len(location_copy)):
                next_ind = np.argmin(location_copy) # find minimum of remaining locations
                next_loc = np.arange(N)[mask][next_ind]
                if type_array[next_loc] == "Easy":
                    path.append(next_loc)
                    found_customer = True
                    break
                else:
                    # remove this location 
                    np.delete(location_copy, next_ind)
            
        # if current customer is "easy", find the next "hard" customer
        else:
            location_copy = A[last][mask]
            for loop_idx in range(len(location_copy)):
                next_ind = np.argmin(location_copy) # find minimum of remaining locations
                next_loc = np.arange(N)[mask][next_ind]
                if type_array[next_loc] == "Hard":
                    path.append(next_loc)
                    found_customer = True
                    break
                else: np.delete(location_copy, next_ind)
        
        if not found_customer:
            next_ind = np.argmin(A[last][mask]) # find minimum of remaining locations
            next_loc = np.arange(N)[mask][next_ind] # convert to original location
            path.append(next_loc)

        print(type_array[next_loc])        
        mask[next_loc] = False
        cost += A[last, next_loc]  


    return path, cost
    # , hard_customer_lst
    
    # Example of this function in use:
    
    # Expected order is 0,2,3,1,4
A = np.array([
    [0, 2, 1, 2, 2],
    [2, 0, 2, 1, 1],
    [1, 2, 0, 1, 2],
    [2, 1, 1, 0, 2],
    [2, 1, 2, 2, 0]])
type_array = ["Easy", "Hard", "Hard", "Easy", "Hard"]
print(NN(A,0))
print(NN_modified(A, 0, type_array))


#Nearest Insertion 
import numpy as np

#Function for Nearest Neighbor Algorithm. 
    #Inputs:
        #A, an NxN array indicating distance/cost between N locations
        #start, index of the starting location
    #Returns:
        #Tour and cost of solution
def NI(A, start): 
    tour = [] #Initialize tour
    tour.append(start) 
    tour.append(start) #Initial subtour beginning and ending with start

    nodes = list(range(0,len(A))) #initialize list of available nodes
    nodes.remove(start) #remove starting node from list of available nodes

    cost = 0 #initialize cost of tour
    minimum = 100000000 #minimum cost initialized to large number

    for i in range(len(A)): #loop through nodes in array
        if A[start][i]<minimum and A[start][i]>0: #find nearest neighbor to start, check to see if NN is not node itself
            minimum = A[start][i] #set new minimum 
            NN = i #set nearest neighbor to start

    tour.insert(1,NN) #insert NN to tour 
    cost += minimum #update cost 
    nodes.remove(NN) #remove NN from list of available nodes

    while nodes != []: #while there are available nodes
        min = 100000000 #set minimum to large number
        for node in range(len(tour)-1): #loop through tour
            i = tour[node] 
            j = tour[node+1] 

            for k in nodes: #loop through available nodes
                if A[i][k]>0 and A[k][j]>0: #check to see if node not itself
                    c = A[i][k]+A[k][j]-A[i][j] #calculate cost to insert in tour

                    if c<min: #if insertion cost is less than min 
                        min = c #set min as insertion cost 
                        index = k #store index of n
                        location = node+1 #store where it would be inserted 
        tour.insert(location,index) #insert node with minimum insertion cost to tour
        cost += min #update cost
        nodes.remove(index) #remove node from list of available nodes

    return tour, cost

A = np.array([
    [0, 2, 1, 2, 2],
    [2, 0, 2, 1, 1],
    [1, 2, 0, 1, 2],
    [2, 1, 1, 0, 2],
    [2, 1, 2, 2, 0]])
# print(NI(A,0))

#Answer should be: 0,4,1,3,2,0
#Problem: NN is being inserted "backwards". Current solution is 0,4,1,3,2,0